#version 120
#extension GL_EXT_gpu_shader4 : enable

/* Pass eyespace position and normal, and texcoord, to the fragment shader. */
varying vec3 EyespacePosition;
varying vec3 EyespaceNormal;
varying vec3 WorldspacePosition;
varying vec3 WorldspaceNormal;
varying float Explosion;

uniform sampler3D DensityFunction;
uniform vec3 LowerCorner;
uniform float NumVoxels;
uniform float BlockSize;


void main()
{

	vec3 coordinate = (gl_Vertex.xyz - LowerCorner) / BlockSize;
	ivec3 voxel_coord = ivec3(0);
	voxel_coord.x = int(coordinate.x * NumVoxels);
	voxel_coord.y = int(coordinate.y * NumVoxels);
	voxel_coord.z = int(coordinate.z * NumVoxels) + 1;
	
	Explosion = texelFetch3D(DensityFunction, voxel_coord, 0).y;
	 
	vec3 gradient = vec3(0.0);
	if (voxel_coord.x == NumVoxels) {
		gradient.x = - texelFetch3D(DensityFunction, voxel_coord, 0).x
	 			+ texelFetch3D(DensityFunction, voxel_coord - ivec3(1, 0, 0), 0).x;
	 	Explosion += texelFetch3D(DensityFunction, voxel_coord - ivec3(1, 0, 0), 0).y;
	} else {
		gradient.x = texelFetch3D(DensityFunction, voxel_coord, 0).x
	 			- texelFetch3D(DensityFunction, voxel_coord + ivec3(1, 0, 0), 0).x;
	 			Explosion += texelFetch3D(DensityFunction, voxel_coord + ivec3(1, 0, 0), 0).y;
	}
	if (voxel_coord.y == NumVoxels) {
		gradient.y = - texelFetch3D(DensityFunction, voxel_coord, 0).x
	 			+ texelFetch3D(DensityFunction, voxel_coord - ivec3(0, 1, 0), 0).x;
	 			Explosion += texelFetch3D(DensityFunction, voxel_coord - ivec3(0, 1, 0), 0).y;
	} else {
		gradient.y = texelFetch3D(DensityFunction, voxel_coord, 0).x
	 			- texelFetch3D(DensityFunction, voxel_coord + ivec3(0, 1, 0), 0).x;
	 		Explosion += texelFetch3D(DensityFunction, voxel_coord + ivec3(1, 0, 0), 0).y;
	}
	if (voxel_coord.z == NumVoxels + 1) {
		gradient.z = - texelFetch3D(DensityFunction, voxel_coord, 0).x
	 			+ texelFetch3D(DensityFunction, voxel_coord - ivec3(0, 0, 1), 0).x;
	 			Explosion += texelFetch3D(DensityFunction, voxel_coord - ivec3(0, 0, 1), 0).y;
	} else {
		gradient.z = texelFetch3D(DensityFunction, voxel_coord, 0).x
	 			- texelFetch3D(DensityFunction, voxel_coord + ivec3(0, 0, 1), 0).x;
	 			Explosion += texelFetch3D(DensityFunction, voxel_coord + ivec3(1, 0, 0), 0).y;
	}			
	 			
	 					
	vec3 eyespaceGradient = normalize(gl_NormalMatrix * -gradient);
	
	/* Standard vertex transform. */
	gl_Position = ftransform();
	
	
	// Transform stuff into eye space and store in varyings.
	WorldspacePosition = gl_Vertex.xyz;
	EyespacePosition = vec3(gl_ModelViewMatrix * gl_Vertex);
   WorldspaceNormal = normalize(-gradient);
   EyespaceNormal = eyespaceGradient;
  
	
}
